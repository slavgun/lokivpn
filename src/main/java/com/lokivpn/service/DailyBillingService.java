package com.lokivpn.service;

import com.lokivpn.model.User;
import com.lokivpn.repository.UserRepository;
import com.lokivpn.repository.VpnClientRepository;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

@Service
public class DailyBillingService {

    private static final Logger logger = LoggerFactory.getLogger(DailyBillingService.class);

    private final UserRepository userRepository;
    private final VpnClientRepository vpnClientRepository;
    private final TelegramMessageSender telegramMessageSender;

    public DailyBillingService(UserRepository userRepository,
                               VpnClientRepository vpnClientRepository,
                               TelegramMessageSender telegramMessageSender) {
        this.userRepository = userRepository;
        this.vpnClientRepository = vpnClientRepository;
        this.telegramMessageSender = telegramMessageSender;
    }

    @Scheduled(cron = "0 0 0 * * ?")
    @Transactional
    public void processDailyBalances() {
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–∏–ª–ª–∏–Ω–≥–∞...");

        Pageable pageable = PageRequest.of(0, 100);
        Page<User> usersPage;

        do {
            usersPage = userRepository.findAll(pageable);
            for (User user : usersPage.getContent()) {
                try {
                    processUser(user);
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getId(), e.getMessage());
                }
            }
            pageable = pageable.next();
        } while (usersPage.hasNext());

        logger.info("–ü—Ä–æ—Ü–µ—Å—Å –±–∏–ª–ª–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.");
    }

    protected void processUser(User user) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatId –≤–º–µ—Å—Ç–æ id
        Long chatId = user.getChatId();
        int clientsCount = vpnClientRepository.countByUserId(chatId);
        int dailyCharge = clientsCount * 5;

        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: –±–∞–ª–∞–Ω—Å={}, –∫–ª–∏–µ–Ω—Ç—ã={}, —Å–ø–∏—Å–∞–Ω–∏–µ={}",
                chatId, user.getBalance(), clientsCount, dailyCharge);

        if (clientsCount == 0) {
            logger.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.", chatId);
            return;
        }

        int balance = user.getBalance();

        if (balance >= dailyCharge) {
            handleSufficientBalance(user, dailyCharge);
        } else {
            handleInsufficientBalance(user);
        }
    }


    private void handleSufficientBalance(User user, int dailyCharge) {
        user.setBalance(user.getBalance() - dailyCharge);
        userRepository.save(user);
        logger.info("–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ {} —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {}", dailyCharge, user.getChatId(), user.getBalance());

        if (user.getBalance() <= dailyCharge * 3) {
            sendLowBalanceNotification(user.getChatId());
        }
    }

    private void handleInsufficientBalance(User user) {
        vpnClientRepository.unassignClientsByUserId(user.getChatId());
        logger.warn("–ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤.", user.getChatId());
        sendClientsRemovedNotification(user.getChatId());
    }

    @Async
    public void sendLowBalanceNotification(Long chatId) {
        try {
            telegramMessageSender.sendNotification(chatId,
                    "üí≥ –£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤.\n" +
                            "üîÑ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.\n" +
                            "üïí –ï—Å–ª–∏ –Ω–µ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π, –∫–ª–∏–µ–Ω—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.");
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è {}: {}", chatId, e.getMessage());
        }
    }

    @Async
    public void sendClientsRemovedNotification(Long chatId) {
        try {
            telegramMessageSender.sendNotification(chatId,
                    "‚ùå –í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –æ–ø–ª–∞—Ç—É.");
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è {}: {}", chatId, e.getMessage());
        }
    }
}

