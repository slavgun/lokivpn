package com.lokivpn.service;

import com.lokivpn.bot.TelegramBotService;
import com.lokivpn.model.VpnClient;
import com.lokivpn.repository.VpnClientRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@Service
public class KeyService {

    private static final Logger logger = LoggerFactory.getLogger(KeyService.class);
    private final TelegramBotService telegramBotService;

    @Autowired
    private VpnClientRepository vpnClientRepository;

    public KeyService(TelegramBotService telegramBotService) {
        this.telegramBotService = telegramBotService;
    }

    public void sendKeysMenu(String chatId, TelegramLongPollingBot bot) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            List<VpnClient> clients = vpnClientRepository.findActiveAndReservedClientsByChatId(chatId);

            SendMessage message = new SendMessage();
            message.setChatId(chatId);

            if (clients.isEmpty()) {
                message.setText("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.");
            } else {
                message.setText("–í–∞—à–∏ –∫–ª—é—á–∏:");

                InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

                for (VpnClient client : clients) {
                    String deviceType = client.getDeviceType() != null ? client.getDeviceType() : "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ";

                    String emoji;
                    switch (deviceType.toLowerCase()) {
                        case "pc":
                            emoji = "üñ•Ô∏è";
                            break;
                        case "phone":
                            emoji = "üì±";
                            break;
                        default:
                            emoji = "üîë";
                            break;
                    }

                    InlineKeyboardButton button = new InlineKeyboardButton(emoji + " " + deviceType + " (" + client.getClientName() + ")");
                    button.setCallbackData("key_" + client.getId());
                    buttons.add(Collections.singletonList(button));
                }

                markup.setKeyboard(buttons);
                message.setReplyMarkup(markup);
            }

            bot.execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π: {}", e.getMessage(), e);
        }
    }

    public void deleteConfiguration(String chatId, String clientId, TelegramLongPollingBot bot) {
        try {
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ clientId
            VpnClient client = telegramBotService.getClientById(clientId);

            // –£–±–∏—Ä–∞–µ–º —Å–≤—è–∑—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            client.setAssigned(false);
            client.setChatId(null);
            client.setUsername(null);
            client.setDeviceType(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            telegramBotService.saveClient(client);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ " + client.getDeviceType() + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.");
            bot.execute(message);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", e.getMessage(), e);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            sendErrorMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", bot);
        }
    }

    public void handleDeviceCallback(String chatId, String callbackData, TelegramLongPollingBot bot) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º clientId –∏–∑ callbackData
            String clientId = callbackData.split("_")[1];
            VpnClient client = telegramBotService.getClientById(clientId);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–µ
            SendMessage message = new SendMessage();
            message.setChatId(chatId);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MarkdownV2 –¥–ª—è —Å–∫—Ä—ã—Ç–æ–≥–æ –∫–ª—é—á–∞
            String hiddenKey = "–í–∞—à –∫–ª—é—á –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ " + client.getDeviceType() + ":\n||" + escapeMarkdownV2(client.getClientPublicKey()) + "||";
            message.setText(hiddenKey);

            // –£–∫–∞–∑—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ MarkdownV2
            message.setParseMode("MarkdownV2");

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è QR-–∫–æ–¥–∞, —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            InlineKeyboardButton qrButton = new InlineKeyboardButton("üì∑ –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥");
            qrButton.setCallbackData("show_qr_" + client.getId());

            InlineKeyboardButton configButton = new InlineKeyboardButton("üìÇ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥");
            configButton.setCallbackData("download_config_" + client.getId());

            InlineKeyboardButton deleteButton = new InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é");
            deleteButton.setCallbackData("delete_config_" + client.getId());

            // –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏: –ø–µ—Ä–≤—ã–µ –¥–≤–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Ç—Ä–µ—Ç—å—é –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            markup.setKeyboard(Arrays.asList(
                    Arrays.asList(qrButton, configButton), // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: QR-–∫–æ–¥ –∏ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
                    Collections.singletonList(deleteButton) // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            ));

            message.setReplyMarkup(markup);

            bot.execute(message);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", e.getMessage(), e);
        }
    }

    private String escapeMarkdownV2(String text) {
        return text.replace("_", "\\_")
                .replace("*", "\\*")
                .replace("[", "\\[")
                .replace("]", "\\]")
                .replace("(", "\\(")
                .replace(")", "\\)")
                .replace("~", "\\~")
                .replace("`", "\\`")
                .replace(">", "\\>")
                .replace("#", "\\#")
                .replace("+", "\\+")
                .replace("-", "\\-")
                .replace("=", "\\=")
                .replace("|", "\\|")
                .replace("{", "\\{")
                .replace("}", "\\}")
                .replace(".", "\\.")
                .replace("!", "\\!");
    }

    private void sendErrorMessage(String chatId, String text, TelegramLongPollingBot bot) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(text);
            bot.execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {}", e.getMessage(), e);
        }
    }
}
