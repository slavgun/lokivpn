package com.lokivpn.service;

import com.lokivpn.bot.TelegramBotService;
import com.lokivpn.model.VpnClient;
import com.lokivpn.repository.VpnClientRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@Service
public class KeyService {

    private static final Logger logger = LoggerFactory.getLogger(KeyService.class);
    private final TelegramBotService telegramBotService;

    @Autowired
    private VpnClientRepository vpnClientRepository;

    public KeyService(TelegramBotService telegramBotService) {
        this.telegramBotService = telegramBotService;
    }

    public void sendKeysMenu(String chatId, TelegramLongPollingBot bot) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
            List<VpnClient> clients = vpnClientRepository.findActiveAndReservedClientsByChatId(chatId);

            SendMessage message = new SendMessage();
            message.setChatId(chatId);

            if (clients.isEmpty()) {
                message.setText("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.");
            } else {
                message.setText("–í–∞—à–∏ –∫–ª—é—á–∏:");

                InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

                for (VpnClient client : clients) {
                    String deviceType = client.getDeviceType() != null ? client.getDeviceType() : "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ";

                    logger.info("Device type: {}, Client name: {}, Is assigned: {}, Reserved until: {}",
                            deviceType, client.getClientName(), client.isAssigned(), client.getReservedUntil());

                    String emoji;
                    if (client.isAssigned()) {
                        // –ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω
                        emoji = client.getDeviceType() != null && client.getDeviceType().equalsIgnoreCase("pc") ? "üñ•Ô∏è" : "üì±";
                    } else if (client.getReservedUntil() != null && client.getReservedUntil().isAfter(LocalDateTime.now())) {
                        // –ö–ª—é—á –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω
                        emoji = "üîë";
                    } else {
                        // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                        emoji = "‚ùå";
                    }

                    InlineKeyboardButton button = new InlineKeyboardButton(emoji + " " + deviceType + " (" + client.getClientName() + ")");
                    button.setCallbackData(client.isAssigned() ? "key_" + client.getId() : "reserved_" + client.getId());
                    buttons.add(Collections.singletonList(button));
                }

                markup.setKeyboard(buttons);
                message.setReplyMarkup(markup);
            }

            bot.execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π: {}", e.getMessage(), e);
        }
    }

    public void handleDeviceCallback(String chatId, String callbackData, TelegramLongPollingBot bot) {
        try {
            String[] parts = callbackData.split("_");
            String action = parts[0];
            String clientId = parts[1];

            VpnClient client = telegramBotService.getClientById(clientId);

            SendMessage message = new SendMessage();
            message.setChatId(chatId);

            if ("key".equals(action)) {
                // –ö–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø–æ–∑–≤–æ–ª—è–µ–º —Å–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                message.setText("–í–∞—à –∫–ª—é—á –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ " + client.getDeviceType() + ":");
                InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

                InlineKeyboardButton qrButton = new InlineKeyboardButton("üì∑ –ü–æ–∫–∞–∑–∞—Ç—å QR –∫–æ–¥");
                qrButton.setCallbackData("show_qr_" + client.getId());

                InlineKeyboardButton configButton = new InlineKeyboardButton("üìÇ –°–∫–∞—á–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥");
                configButton.setCallbackData("download_config_" + client.getId());

                markup.setKeyboard(Arrays.asList(
                        Arrays.asList(qrButton, configButton)
                ));
                message.setReplyMarkup(markup);
            } else if ("reserved".equals(action)) {
                // –ö–ª—é—á –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
                message.setText("–≠—Ç–æ—Ç –∫–ª—é—á –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.");
            }

            bot.execute(message);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", e.getMessage(), e);
        }
    }
}
