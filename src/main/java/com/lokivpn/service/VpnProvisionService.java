package com.lokivpn.service;

import com.lokivpn.model.User;
import com.lokivpn.model.VpnClient;
import com.lokivpn.bot.TelegramBotService;
import com.lokivpn.repository.UserRepository;
import com.lokivpn.repository.VpnClientRepository;
import jakarta.transaction.Transactional;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.time.LocalDateTime;
import java.util.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;


@Service
public class VpnProvisionService {

    private static final Logger logger = LoggerFactory.getLogger(VpnProvisionService.class);

    private final TelegramBotService telegramBotService;

    @Autowired
    private VpnClientRepository vpnClientRepository;

    @Autowired
    private PaymentService paymentService;

    @Autowired
    private UserRepository userRepository;

    public VpnProvisionService(TelegramBotService telegramBotService) {
        this.telegramBotService = telegramBotService;
    }

    public void handleGetVpn(String chatId, TelegramLongPollingBot bot) {
        logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '–ü–æ–ª—É—á–∏—Ç—å VPN' –¥–ª—è chatId={}", chatId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        Optional<VpnClient> optionalPendingClient = vpnClientRepository.findFirstByChatId(chatId);
        if (optionalPendingClient.isPresent()) {
            VpnClient pendingClient = optionalPendingClient.get();
            if (pendingClient.getReservedUntil() != null && pendingClient.getReservedUntil().isAfter(LocalDateTime.now())) {
                logger.info("–ù–∞–π–¥–µ–Ω–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—è –¥–ª—è chatId={}: {}", chatId, pendingClient);

                sendMessageWithResetOption(chatId, bot, "–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–ª–∞–Ω\".");
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            } else if (pendingClient.getExpirationDate() != null && pendingClient.getExpirationDate().isAfter(LocalDateTime.now())) {
                logger.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {}", chatId, pendingClient.getExpirationDate());

                sendMessage(chatId, bot, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: " + pendingClient.getExpirationDate());
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
            }
        }

        // –ï—Å–ª–∏ —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        logger.info("–†–µ–∑–µ—Ä–≤–∞—Ü–∏–∏ –¥–ª—è chatId={} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.", chatId);
        sendDeviceSelection(chatId);
    }

    private void sendMessageWithResetOption(String chatId, TelegramLongPollingBot bot, String text) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(text);

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            InlineKeyboardButton resetButton = new InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é");
            resetButton.setCallbackData("reset_reservation");
            markup.setKeyboard(Collections.singletonList(Collections.singletonList(resetButton)));

            message.setReplyMarkup(markup);
            bot.execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —Å–±—Ä–æ—Å–∞: {}", e.getMessage(), e);
        }
    }

    @Transactional
    public void resetReservation(String chatId) {
        Optional<VpnClient> client = vpnClientRepository.findFirstByChatId(chatId);
        if (client.isPresent()) {
            VpnClient vpnClient = client.get();
            vpnClient.setReservedUntil(null);
            vpnClient.setAssigned(false);
            vpnClient.setPlan(null);
            vpnClient.setExpirationDate(null);
            vpnClientRepository.save(vpnClient);
        }
    }

    public void sendDeviceSelection(String chatId) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∫–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN:");

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

            InlineKeyboardButton phoneButton = new InlineKeyboardButton("\uD83D\uDCF1 –°–º–∞—Ä—Ç—Ñ–æ–Ω");
            phoneButton.setCallbackData("device_phone");

            InlineKeyboardButton pcButton = new InlineKeyboardButton("\uD83D\uDCBB –ö–æ–º–ø—å—é—Ç–µ—Ä");
            pcButton.setCallbackData("device_pc");

            markup.setKeyboard(Collections.singletonList(Arrays.asList(phoneButton, pcButton)));
            message.setReplyMarkup(markup);

            telegramBotService.getBot().execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", e.getMessage(), e);
        }
    }

    public void handleDeviceSelection(String chatId, String callbackData) {
        try {
            String deviceType = callbackData.equals("device_pc") ? "–ü–ö" : "–°–º–∞—Ä—Ç—Ñ–æ–Ω";

            // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            VpnClient client = vpnClientRepository.findFirstByIsAssignedFalse()
                    .orElseThrow(() -> new RuntimeException("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."));

            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            client.setChatId(chatId);
            client.setDeviceType(deviceType);
            client.setAssigned(true);
            client.setReservedUntil(null); // –û—á–∏—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∞—Ü–∏—é, –µ—Å–ª–∏ –±—ã–ª–∞
            vpnClientRepository.save(client);

            logger.info("–ö–ª–∏–µ–Ω—Ç {} –Ω–∞–∑–Ω–∞—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º {}.", client.getId(), chatId, deviceType);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –û–°
            sendOsSelectionMessage(chatId, deviceType);
        } catch (RuntimeException e) {
            logger.error("–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {}", e.getMessage(), e);
            sendErrorMessage(chatId, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {}", e.getMessage(), e);
            sendErrorMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }


    public void updateDeviceForUser(String chatId, String deviceType, String osType) {
        try {
            VpnClient client = vpnClientRepository.findFirstByChatId(chatId)
                    .orElseThrow(() -> new RuntimeException("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + chatId));

            client.setDeviceType(deviceType);
            client.setOsType(osType); // –û–±–Ω—É–ª—è–µ–º –¥–æ –≤—ã–±–æ—Ä–∞ –û–°
            vpnClientRepository.save(client);

            logger.info("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {}, –û–° –æ–±–Ω—É–ª–µ–Ω–∞.", chatId, deviceType);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", chatId, e.getMessage(), e);
        }
    }

    private void sendOsSelectionMessage(String chatId, String deviceType) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: " + deviceType + ". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É:");

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> buttons = new ArrayList<>();

            if ("–ü–ö".equals(deviceType)) {
                // –î–ª—è –ü–ö
                InlineKeyboardButton windowsButton = new InlineKeyboardButton("üñ• Windows");
                windowsButton.setCallbackData("os_windows");
                InlineKeyboardButton macosButton = new InlineKeyboardButton("üçé macOS");
                macosButton.setCallbackData("os_macos");
                InlineKeyboardButton linuxButton = new InlineKeyboardButton("üêß Linux");
                linuxButton.setCallbackData("os_linux");

                buttons.add(Arrays.asList(windowsButton, macosButton));
                buttons.add(Collections.singletonList(linuxButton));
            } else {
                // –î–ª—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞
                InlineKeyboardButton iosButton = new InlineKeyboardButton("üçè iOS");
                iosButton.setCallbackData("os_ios");
                InlineKeyboardButton androidButton = new InlineKeyboardButton("ü§ñ Android");
                androidButton.setCallbackData("os_android");

                buttons.add(Arrays.asList(iosButton, androidButton));
            }

            markup.setKeyboard(buttons);
            message.setReplyMarkup(markup);

            telegramBotService.getBot().execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –û–°: {}", e.getMessage(), e);
        }
    }

    public void handleOsSelection(String chatId, String osType) {
        try {
            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            VpnClient client = vpnClientRepository.findFirstByChatIdAndIsAssignedTrueOrderByIdDesc(chatId)
                    .orElseThrow(() -> new RuntimeException("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + chatId));

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –û–°
            client.setOsType(osType);
            vpnClientRepository.save(client);

            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤—ã–±—Ä–∞–ª –û–° {} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {}.", chatId, osType, client.getId());

            sendPlanSelectionMenu(chatId);
        } catch (RuntimeException e) {
            logger.error("–û—à–∏–±–∫–∞: {}", e.getMessage(), e);
            sendErrorMessage(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –û–°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –û–°: {}", e.getMessage(), e);
            sendErrorMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –û–°. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }


    public void sendPlanSelectionMenu(String chatId) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:");

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

            InlineKeyboardButton plan1Month = new InlineKeyboardButton("1 –º–µ—Å—è—Ü - 200—Ä.");
            plan1Month.setCallbackData("plan_1_month");

            InlineKeyboardButton plan3Months = new InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ - 500—Ä.");
            plan3Months.setCallbackData("plan_3_months");

            InlineKeyboardButton plan6Months = new InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ - 900—Ä.");
            plan6Months.setCallbackData("plan_6_months");

            InlineKeyboardButton plan1Year = new InlineKeyboardButton("1 –≥–æ–¥ - 1600—Ä.");
            plan1Year.setCallbackData("plan_1_year");

            markup.setKeyboard(List.of(
                    List.of(plan1Month),
                    List.of(plan3Months),
                    List.of(plan6Months),
                    List.of(plan1Year)
            ));
            message.setReplyMarkup(markup);

            telegramBotService.getBot().execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞: {}", e.getMessage(), e);
            sendErrorMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    public void handlePlanSelection(String chatId, String callbackData, String username) {
        try {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–ª–∞–Ω
            String normalizedPlan = normalizePlan(callbackData);

            // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            VpnClient client = vpnClientRepository.findFirstByChatIdAndIsAssignedTrueOrderByIdDesc(chatId)
                    .orElseThrow(() -> new RuntimeException("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞."));

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
            client.setPlan(normalizedPlan);
            client.setReservedUntil(LocalDateTime.now().plusMinutes(15));
            vpnClientRepository.save(client);

            logger.info("–†–µ–∑–µ—Ä–≤–∞—Ü–∏—è –ø–ª–∞–Ω–∞ {} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {}).", normalizedPlan, client.getId(), chatId);

            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ
            sendPaymentOptions(chatId, username, normalizedPlan);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞: {}", e.getMessage(), e);
            sendErrorMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }


    private String normalizePlan(String callbackData) {
        switch (callbackData) {
            case "plan_1_month":
                return "1_month";
            case "plan_3_months":
                return "3_months";
            case "plan_6_months":
                return "6_months";
            case "plan_1_year":
                return "1_year";
            default:
                throw new IllegalArgumentException("Unknown plan: " + callbackData);
        }
    }


    public void sendPaymentOptions(String chatId, String username, String plan) {
        try {
            String paymentUrl = paymentService.createPaymentLink(Long.parseLong(chatId), username, plan);

            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.");

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();

            InlineKeyboardButton paymentButton = new InlineKeyboardButton("\uD83D\uDCB3 –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É");
            paymentButton.setUrl(paymentUrl);

            markup.setKeyboard(Collections.singletonList(Collections.singletonList(paymentButton)));
            message.setReplyMarkup(markup);

            telegramBotService.getBot().execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã: {}", e.getMessage(), e);
            sendErrorMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    private void sendMessage(String chatId, TelegramLongPollingBot bot, String text) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(text);
            bot.execute(message);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }


    private void sendErrorMessage(String chatId, String text) {
        try {
            telegramBotService.getBot().execute(new SendMessage(chatId, text)); // –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É —á–µ—Ä–µ–∑ TelegramBotService
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {}", e.getMessage(), e);
        }
    }
}
